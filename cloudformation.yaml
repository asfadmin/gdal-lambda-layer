AWSTemplateFormatVersion: 2010-09-09

Resources:

  LogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/codebuild/${AWS::StackName}"
      RetentionInDays: 30

  Role:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Ref AWS::StackName
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          Action: sts:AssumeRole
          Principal:
            Service: codebuild.amazonaws.com
          Effect: Allow
      Policies:
      - PolicyName: policy
        PolicyDocument:
          Version: 2012-10-17
          Statement:
          - Effect: Allow
            Action:
            - logs:CreateLogStream
            - logs:PutLogEvents
            Resource: !GetAtt LogGroup.Arn
          - Effect: Allow
            Action:
            - lambda:PublishLayerVersion
            Resource: !Sub "arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:layer:${AWS::StackName}*"

  Project:
    Type: AWS::CodeBuild::Project
    Properties:
      Name: !Ref AWS::StackName
      Environment:
        ComputeType: BUILD_GENERAL1_LARGE
        Type: LINUX_CONTAINER
        Image: amazonlinux:2017.03.1.20170812
      ServiceRole: !Ref Role
      Source:
        Type: NO_SOURCE
        BuildSpec: !Sub |-
          version: 0.2 
          env:
            variables:
              LAYER_NAME: ${AWS::StackName}
              LAYER_DESCRIPTION: gdal 2.5.0dev for python2.7 with netcdf/hdf5 support
          phases:
            build:
              commands:
              # install build tools and dependencies available via yum
              - yum install -y gcc gcc-c++ make libtool file gzip zip wget openssl-devel libffi-devel
              - yum install -y https://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm
              - yum install -y netcdf-devel hdf5-devel
              # create folders for deployment package
              - mkdir /opt/python
              - mkdir /opt/lib
              - mkdir /opt/lib/data
              - export PKG_CONFIG_PATH=/usr/local/lib/pkgconfig
              # install python and pip 3.8.1
              - wget https://www.python.org/ftp/python/3.8.1/Python-3.8.1.tgz
              - tar xzf Python-3.8.1.tgz
              - cd Python-3.8.1
              - ./configure
              - make -j $(nproc)
              - make install
              - cd ..
              # install sqlite
              - wget https://www.sqlite.org/snapshot/sqlite-snapshot-202002181949.tar.gz
              - tar xvzf sqlite-snapshot-202002181949.tar.gz
              - cd sqlite-snapshot-202002181949
              - ./configure
              - make -j $(nproc)
              - make install
              - cd ..
              # install proj 6.3.1
              - wget https://github.com/OSGeo/PROJ/releases/download/6.3.1/proj-6.3.1.tar.gz
              - tar xvzf proj-6.3.1.tar.gz
              - cd proj-6.3.1
              - ./configure --datarootdir=/opt/lib/data
              - make -j $(nproc)
              - make install
              - cd ..
              # install gdal 3.0.4
              - wget https://github.com/OSGeo/gdal/releases/download/v3.0.4/gdal-3.0.4.tar.gz
              - tar xvzf gdal-3.0.4.tar.gz
              - cd gdal-3.0.4
              - ./configure --with-proj --datarootdir=/opt/lib/data > /opt/configure.txt
              - make -j $(nproc)
              - make install
              - cd ../..
              # copy libraries into deployment package
              - cp /usr/local/lib/libgdal.so.26 /opt/lib/
              - cp /usr/local/lib/libproj.so.15 /opt/lib/
              - cp /usr/local/lib/libsqlite3.so.0 /opt/lib/
              - cp /usr/lib64/libnetcdf.so.7 /opt/lib/
              - cp /usr/lib64/libhdf5.so.8 /opt/lib/
              - cp /usr/lib64/libhdf5_hl.so.8 /opt/lib/
              - cp /usr/lib64/libsz.so.2 /opt/lib/
              - cp /usr/lib64/libaec.so.0 /opt/lib/
              - cp /usr/lib64/libcurl.so.4 /opt/lib/
              - cp /usr/lib64/libjpeg.so.62 /opt/lib/
              - cp /usr/lib64/libnghttp2.so.14 /opt/lib/
              - cp /usr/lib64/libidn2.so.0 /opt/lib/
              - cp /usr/lib64/libssh2.so.1 /opt/lib/
              - cp /usr/lib64/libldap-2.4.so.2 /opt/lib/
              - cp /usr/lib64/liblber-2.4.so.2 /opt/lib/
              - cp /usr/lib64/libunistring.so.0 /opt/lib/
              - cp /usr/lib64/libsasl2.so.3 /opt/lib/
              - cp /usr/lib64/libssl3.so /opt/lib/
              - cp /usr/lib64/libsmime3.so /opt/lib/
              - cp /usr/lib64/libnss3.so /opt/lib/
              - strip /opt/lib/*.so*
              # install gdal python bindings into deployment package
              - pip3.8 install -t /opt/python/ gdal==3.0.4
              # zip and deploy package
              - cd /opt
              - zip -r gdal-layer.zip *
              - pip3.8 install awscli
              - aws lambda publish-layer-version --layer-name $LAYER_NAME --description "$LAYER_DESCRIPTION" --compatible-runtimes python3.8 --license-info MIT --zip-file fileb://gdal-layer.zip
      Artifacts:
        Type: NO_ARTIFACTS
      LogsConfig:
        CloudWatchLogs:
          Status: ENABLED
          GroupName: !Ref LogGroup
      TimeoutInMinutes: 20
